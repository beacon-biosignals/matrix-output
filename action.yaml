---
name: Matrix Output
description: >-
  Collect outputs from each matrix job.
inputs:
  yaml:
    description: >-
      A string representing YAML data. Typically, a simple dictionary of key/value pairs.
    type: string
    required: true
outputs:
  json:
    description: >-
      A string representing a JSON list of dictionaries. Each dictionary in the list
      contains the output for a single job from the job matrix. The order of this list
      corresponds to the job index (i.e. `strategy.job-index`).
    value: ${{ steps.merge.outputs.json }}
runs:
  using: composite
  steps:
    - uses: beacon-biosignals/matrix-output/job-context@dabf4aae56b754e4d2cbfd3319c294ebedd9ad42
      id: job
      with:
        path: ${{ github.action_path }}/repo
    - name: Generate job output
      shell: bash
      run: |
        input_json="$(yq -o=json <<<"${input_yaml:?}")"
        jq -ne \
            --argjson metadata "{\"job-id\": ${job_id:?}}" \
            --argjson outputs "${input_json:?}" \
            '$ARGS.named' | tee -a job-output.json
        touch job-sync
      env:
        input_yaml: ${{ inputs.yaml }}
        job_id: ${{ steps.job.outputs.job-id }}
    - name: Upload job output
      uses: actions/upload-artifact@v4
      with:
        name: matrix-output-${{ github.job }}-${{ strategy.job-index }}
        path: job-output.json
        if-no-files-found: error
    - name: Download job matrix outputs
      uses: actions/download-artifact@v4
      with:
        pattern: matrix-output-${{ github.job }}-*
        path: matrix-output
        merge-multiple: false
    - name: Determine artifact jobs
      id: artifact-jobs
      shell: bash
      run: |
        # Determine artifact jobs
        [[ "$RUNNER_DEBUG" -eq 1 ]] && set -x

        jobs="$(jq -rs '[.[].metadata."job-id"] | to_entries | map({id: .value, index: .key})' matrix-output/*/*.json)"

        sync_artifact_name="${prefix}-${artifact_index}"

        # Specify our multiline output using GH action flavored heredocs
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        {
            echo "json<<EOF"
            jq '.' <<<"${jobs}"
            echo "EOF"
        } >>"$GITHUB_OUTPUT"
      env:
        GH_TOKEN: ${{ github.token }}
    # An alternate version of `/repos/{owner}/{repo}/actions/runs/${run_id}/attempts/${run_attempt}/jobs`
    # which reports only jobs which were actually executed. Mainly, this results in
    # different values for `id`, `run_attempt`, and `created_at` being returned.
    #
    # Specifically, this alternate version is needed such that the `job-id` written to the
    # `matrix-output` artifact matches the job `id` from the GitHub API for jobs which were
    # not re-run.
    - name: Determine executed jobs
      id: executed-jobs
      shell: bash
      run: |
        # Determine executed jobs

        # Fetch the jobs for the current and all previous run attempts. We are not using
        # the GitHub API endpoint `/repos/{owner}/{repo}/actions/runs/{run_id}/jobs?filter=all`
        # here as it has proven to be unreliable and does not include running jobs.
        jobs='[]'
        for attempt in $(seq 1 ${run_attempt}); do
            attempt_jobs="$(gh api -X GET --paginate "/repos/{owner}/{repo}/actions/runs/${run_id:?}/attempts/${attempt:?}/jobs" --jq '.jobs')"

            # Remove job entries which weren't actually executed during this attempt.
            # The GitHub API includes new `job_id`s for each `run_attempt` and we want to
            # exclude these entries as we only want jobs which have actually executed.
            attempt_jobs="$(jq 'map(select(.completed_at == null or .completed_at >= .created_at))' <<<"${attempt_jobs}")"

            jobs="$(jq -e --argjson attempt_jobs "${attempt_jobs}" '. |= . + $attempt_jobs' <<<"$jobs")"
        done

        # Remove older jobs which were re-run
        jobs="$(jq 'sort_by(.created_at) | reverse | unique_by(.name)' <<<"${jobs}")"

        if [[ "$RUNNER_DEBUG" -eq 1 ]]; then
            echo "Executed jobs:"
            jq '[.[] | {id, name, run_id, run_attempt, created_at, completed_at, conclusion}' <<<"${jobs}"
        fi

        {
            echo "json<<EOF"
            jq '.' <<<"${jobs}"
            echo "EOF"
        } >>"$GITHUB_OUTPUT"
      env:
        GH_TOKEN: ${{ github.token }}
        run_id: ${{ github.run_id }}
        run_attempt: ${{ github.run_attempt }}
    - name: Determine matrix jobs
      id: matrix-jobs
      shell: bash
      run: |
        # Determine matrix jobs
        set -x

        artifact_job_ids="$(jq '[.[] | .id]' <<<"${artifact_jobs}")"

        executed_jobs="$(jq '[.[] | {id, name, conclusion}]' <<<"${executed_jobs}")"
        executed_job_ids="$(jq '[.[] | .id]' <<<"${executed_jobs}")"

        # Perform an intersection between the job ID lists
        matrix_jobs_ids="$(jq -n --argjson A "${executed_job_ids:?}" --argjson B "${artifact_job_ids:?}" '$A - ($A - $B) | unique')"
        matrix_jobs="$(jq --argjson m "${matrix_jobs_ids}" 'map(select(.id as $id | $m | index($id)))' <<<"$executed_jobs")"

        num_matrix_jobs="$(jq length <<<"${matrix_jobs}")"
        echo "Matrix output ready ${num_matrix_jobs}/${{ strategy.job-total }}" >&2

        num_running_matrix_jobs="$(jq 'map(select(.conclusion == null)) | length' <<<"${matrix_jobs}")"

        {
            echo "num=${num_matrix_jobs}"
            echo "num-running=${num_running_matrix_jobs}"

            echo "json<<EOF"
            jq '.' <<<"${matrix_jobs}"
            echo "EOF"
        } | tee -a "$GITHUB_OUTPUT"
      env:
        GH_TOKEN: ${{ github.token }}
        artifact_jobs: ${{ steps.artifact-jobs.outputs.json }}
        executed_jobs: ${{ steps.executed-jobs.outputs.json }}
    - name: Upload sync artifact
      uses: actions/upload-artifact@v4
      if: ${{ steps.matrix-jobs.outputs.num == strategy.job-total && steps.matrix-jobs.outputs.num-running > 1 }}
      with:
        name: matrix-output-sync-${{ github.job }}-${{ strategy.job-index }}
        path: job-sync
    - id: wait
      if: ${{ steps.matrix-jobs.outputs.num == strategy.job-total && steps.matrix-jobs.outputs.num-running > 1 }}
      shell: bash
      run: |
        # Wait for running matrix jobs
        set -x

        # Wait for remaining running jobs
        readarray -t running_job_ids <<<"$(jq -r --arg job_id "${job_id}" '.[] | select(.conclusion == null and .id != ($job_id | tonumber)) | .id' <<<"${matrix_jobs}")"
        while [[ ${#running_job_ids[@]} -gt 0 ]]; do
            running_job_id="${running_job_ids[0]}"
            echo "Waiting for $running_job_id"

            job_index="$(jq --arg id "${running_job_id}" '.[] | select(.id == $id).index' <<<"${artifact_jobs}")"
            sync_artifact_name="${sync_artifact_prefix}-${artifact_index}"

            # https://docs.github.com/en/rest/actions/artifacts?apiVersion=2022-11-28#list-workflow-run-artifacts
            artifacts="$(gh api -X GET "/repos/{owner}/{repo}/actions/runs/${run_id:?}/artifacts")"

            sync_artifact_exists="$(jq --arg name "${sync_artifact_name:?}" '.artifacts | map(select(.name == $name)) | any' <<<"${artifacts}")"
            if [[ "${sync_artifact_exists}" == "true" ]]; then
                running_job_ids=("${running_job_ids[@]:1}")  # Drop the first element
                continue
            fi

            running_job="$(gh api -X GET "/repos/{owner}/{repo}/actions/jobs/${running_job_id:?}")"
            is_running="$(jq '.conclusion == null' <<<"${running_job}")"

            if [[ "${is_running}" == "false" ]]; then
                running_job_ids=("${running_job_ids[@]:1}")  # Drop the first element
                continue
            fi
            
            sleep 5
        done
      env:
        GH_TOKEN: ${{ github.token }}
        matrix_jobs: ${{ steps.matrix-jobs.outputs.json }}
        artifact_jobs: ${{ steps.artifact-jobs.outputs.json }}
        run_id: ${{ github.run_id }}
        job_id: ${{ steps.job.outputs.job-id }}
        sync_artifact_prefix: matrix-output-sync-${{ github.job }}
    - name: Merge job matrix output
      id: merge
      if: ${{ steps.matrix-jobs.outputs.num == strategy.job-total }}
      shell: bash
      run: |
        # Merge job matrix output

        # Specify our multiline output using GH action flavored heredocs
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        {
            echo "json<<EOF"
            jq -s '[.[].outputs]' matrix-output/*/*.json
            echo "EOF"
        } | tee -a "$GITHUB_OUTPUT"
